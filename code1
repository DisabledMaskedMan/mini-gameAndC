double recursion(int n, int k)
{
	if (k < 0)
	{
		return (1.0 / n) * recursion(n, k + 1);
	}
	else if (k > 0)
	{
		return n * recursion(n, k - 1);
	}
	else
	{
		return 1.0;
	}
}

int main()
{
	int n = 0;
	int k = 0;
	printf("请输入->");
	scanf("%d%d", &n, &k);
	double ret = recursion(n, k);
	printf("%lf\n", ret);
	return 0;
}

int fac(int n)
{
	if (n == 1)
	{
		return 1;
	}
	return n * fac(n - 1);
}

int addfac(int n)
{
	if (n == 1)
	{
		return 1;
	}
	return fac(n) + addfac(n - 1);
}

int main()
{
	int n = 0;
	int num = 0;
	printf("请输入:>");
	scanf("%d", &n);
	num = addfac(n);
	printf("%d\n", num);
	return 0;
}

int main()
{
	int i = 0;
	int n = 0;
	int z = 0;
	int k = 0;
	printf("请输入:>");
	scanf("%d", &n);
	for (i = 1; i <= n; i++)
	{
		int j = 0;
		z = 1;
		for (j = 1; j <= i; j++)
		{
			z *= j;
		}
		k += z;
	}
	printf("%d\n", k);
	return 0;
}

void exchange(int arr1[], int arr2[], int sz)
{
	int tmp = 0;
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		tmp = arr1[i];
		arr1[i] = arr2[i];
		arr2[i] = tmp;
	}
}

void print(int arr[], int x)
{
	int i = 0;
	for (i = 0; i < x; i++)
	{
		printf("%d ", arr[i]);
	}
}

int main()

` {
	int arr1[10] = { 1,2,3,4,5,6,7,8,9,10 };
	int arr2[10] = { 11,12,13,14,15,16,17,18,19,20 };
	int sz = sizeof(arr1) / sizeof(arr1[0]);
	exchange(arr1, arr2, sz);
	print(arr1, sz);
	printf("\n");
	print(arr2, sz);
}

int main()
{
	int a = 6;
	int b = 8;
	int c = a | b;
	printf("%d", c);
	return 0;
}
 
 
// & 按位与
int main()
{
	int a = 6;
	int b = 8;
	int c = a & b;
	printf("%d", c);
	return 0;
}
int main()
{
	int arr[10] = { 1 ,2 ,3 ,4 ,5 , 6 , 7 , 8 , 9 , 10 };
	int i = 0;
	while(i<10)
	{
			printf("%d ", arr[i]);
			i++;
	}
	return 0;
}

int main()
{
	int a = 0;
	int x = 3;
	char password[20] = { 0 };
	for (a = 1; a <= 3; a++)
	{
		printf("请输入你的密码");
		scanf("%s", password);
			if (strcmp(password,"123456789") == 0)
			{
				printf("密码正确");
				break;
			}
			else
			{
				x--;
				printf("输入错误，您还剩下%d次机会\n", x);
				if (x == 0)
				{
					printf("登陆失败");
					break;
				}
				continue;
			}
	}
	return 0;
}

int main()
{
	double i = 0;
	int n = 0;
	double sum = 0;
	double ret = 0;
	do
	{
		printf("请输入:>");
		scanf("%lf", &i);
		if (i < 0)
			break;
		sum += i;
		n++;
	} while (i >= 0);
	ret = sum / n;
	printf("%lf", ret);
	return 0;
}

void sort(int p[], int n)
{
	int* start = p;
	int* end = p + n - 1;
	while (end > start)
	{
		int tmp = *start;
		*start = *end;
		*end = tmp;
		start++;
		end--;
	}
}

int main()
{
	int arr[6] = { 0 };
	int i = 0;
	for (i = 0; i < 6; i++)
	{
		printf("请输入:>");
		scanf("%d", arr + i);
	}
	int n = sizeof(arr) / sizeof(arr[0]);
	sort(arr, n);
	for (i = 0; i < 6; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}

int sort(int* p, int n)
{
	int i = 0;
	for (i = 0; i < n - 1; i++)
	{
		int j = 0;
		for (j = 0; j < n - 1 - i; j++)
		{
			if (p[j] < p[j + 1])
			{
				int tmp = p[j];
				p[j] = p[j + 1];
				p[j + 1] = tmp;
			}
		}
	}
	return p[0];
}

int main()
{
	int arr[5] = { 0 }; 
	int i = 0;
	for (i = 0; i < 5; i++)
	{
		printf("请输入:>");
		scanf("%d", arr + i);
	}
	int n = sizeof(arr) / sizeof(arr[0]);
	int max = sort(arr, n);
	printf("Max = %d\n", max);
	for (i = 0; i < 5; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}

#define N 6
int main()
{
	int arr[N] = { 0 };
	int i = 0;
	for (i = 0; i < N; i++)
	{
		printf("请输入:>");
		scanf("%d", arr + i);
	}
	for (i = 0; i < N; i++)
	{
		int j = 0;
		for (j = i + 1; j < N; j++)
		{
			if (arr[i] < arr[j])
			{
				i = j - 1;
				break;
			}
		}
		if (j == N)
		{
			int tmp = arr[i];
			arr[i] = arr[N - 1];
			arr[N - 1] = tmp;
			int z = 0;
			for (z = 0; z < N; z++)
			{
				printf("%d ", arr[z]);
			}
			return 0;
		}
	}
	for (i = 0; i < N; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}

int a = 5;
int main()
{
	int s = 0;
	{
		int a = 3;
		s += a++;
	}
	s += a++;
	printf("%d", s);
	return 0;
}

int a = 5;
void fun()
{
	a = 1;
}

int main()
{
	a = 3;
	fun();
	printf("%d\n", a);
	int a = 10;
	printf("%d", a);
	return 0;
}

struct student
{
	int num;
	int age;
};

int main()
{
	struct student s[3] = { {1,20},{2,19},{3,18} };
	struct student* p = s;
	printf("%d\n", (*++p).age);
	printf("%d\n", (*p++).age);
	printf("%d\n", (p++)->age);
	printf("%d", ++(p->age));
	return 0;
}

int main()
{
	const char* a = "abcdef";
	const char* b = "";
	char A[] = "abcdef";
	char B[] = "";
	int num = printf("%s\n", a);
	printf("%d\n", num);
	num = printf("%s", b);
	printf("%d\n", num);
	num = printf("%s\n", A);
	printf("%d\n", num);
	num = printf("%s", B);
	printf("%d\n", num);
	return 0;
}

int main()
{
	unsigned int a = 1;
	int b = -2;
	int c = 0;
	printf("%u\n", b);
	printf("%d\n", a + b);
	printf("%u\n", a + b);
	(a + b > 0) ? (c = 1) : (c = 2);
	printf("%d\n", c);
	return 0;
}

int main()
{
	unsigned int a = 1;
	int b = -1;
	int c = 0;
	printf("%u\n", b);
	printf("%d\n", a + b);
	printf("%u\n", a + b);
	(a + b > 0) ? (c = 1) : (c = 2);
	printf("%d\n", c);
	return 0;
}
